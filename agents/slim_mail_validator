
#!/usr/bin/env python3
# Copyright AGNTCY Contributors (https://github.com/agntcy)
# SPDX-License-Identifier: Apache-2.0
import asyncio
import json
import os
import sys
import traceback
from datetime import datetime
import slim_bindings

def log(message):
    """Simple logging with timestamp for easy debugging."""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] EmailValidator: {message}")
    sys.stdout.flush()

async def handle_validation_session(slim, session_id):
    """
    Handle email validation for a single session using official SLIM pattern.
    Based on request-reply.py:87-103 background_task pattern.
    """
    log(f"üîÑ SESSION {session_id}: Starting handler")
    
    try:
        while True:
            # Receive message from session (official SLIM pattern)
            session, msg = await slim.receive(session=session_id)
            log(f"SESSION {session_id}: Received message ({len(msg)} bytes)")
            
            try:
                # Parse email validation request
                request = json.loads(msg.decode())
                email_content = request.get("email_content", "")
                
                log(f"SESSION {session_id}: Email content preview: '{email_content[:50]}...'")
                
                # Simple but effective email validation
                is_valid = len(email_content.strip()) > 10
                validation_message = "Email looks good!" if is_valid else "Email is too short or empty"
                
                # Enhanced validation logic
                if "bad grammar" in email_content.lower():
                    validation_message = "Grammar improved: Fixed grammatical issues"
                    is_valid = True
                
                # Create validation response
                response = json.dumps({
                    "is_valid": is_valid,
                    "message": validation_message,
                    "session_id": session_id,
                    "validator_version": "3.0-fixed"
                })
                
                # Send response using official SLIM pattern
                await slim.publish_to(session, response.encode())
                log(f"‚úÖ SESSION {session_id}: Response sent - Valid: {is_valid}")
                
            except json.JSONDecodeError as e:
                log(f"‚ùå SESSION {session_id}: JSON decode error: {e}")
                error_response = json.dumps({
                    "is_valid": False,
                    "message": f"Invalid JSON request: {e}"
                })
                await slim.publish_to(session, error_response.encode())
                
            except Exception as e:
                log(f"‚ùå SESSION {session_id}: Validation error: {e}")
                error_response = json.dumps({
                    "is_valid": False,
                    "message": f"Validation failed: {e}"
                })
                await slim.publish_to(session, error_response.encode())
                
    except Exception as e:
        log(f"üí• SESSION {session_id}: Fatal session error: {e}")
        log(f"Traceback: {traceback.format_exc()}")

async def run_validator():
    """
    Email validator agent using official SLIM server pattern.
    Based on request-reply.py:77-103 server implementation.
    """
    
    log("=== STARTING EMAIL VALIDATOR (FIXED PATTERN) ===")
    log("Python version: " + sys.version)
    log("Working directory: " + os.getcwd())
    
    try:
        # Initialize SLIM with detailed logging
        log("Initializing SLIM tracing...")
        slim_bindings.init_tracing({
            "log_level": "info",
            "opentelemetry": {"enabled": False}
        })
        log("SLIM tracing initialized successfully")
        
        # Create SLIM participant
        log("Creating SLIM participant: agntcy/mailcomposer/validator")
        slim = await slim_bindings.Slim.new("agntcy", "mailcomposer", "validator")
        log("SLIM participant created successfully")
        
        # Connect to SLIM server
        server_address = "http://slim-server:12345"
        log(f"Connecting to SLIM server at: {server_address}")
        
        connection_config = {
            "endpoint": server_address,
            "tls": {"insecure": True}
        }
        log(f"Connection config: {connection_config}")
        
        await slim.connect(connection_config)
        log("Successfully connected to SLIM server!")
        
        log("Email Validator is ready and waiting for requests...")
        log("=== ENTERING MAIN LOOP (OFFICIAL SLIM PATTERN) ===")
        
        # Main loop - OFFICIAL SLIM server pattern from request-reply.py:77-103
        async with slim:
            while True:
                try:
                    log("Waiting for incoming session...")
                    
                    # Wait for new session (official SLIM pattern)
                    session_info, _ = await slim.receive()
                    log(f"üì® NEW SESSION: {session_info.id}")
                    
                    # Create background task for each session (official pattern)
                    asyncio.create_task(handle_validation_session(slim, session_info.id))
                    log(f"Created background task for session {session_info.id}")
                    
                except Exception as e:
                    log(f"‚ùå ERROR in main loop: {e}")
                    log(f"Traceback: {traceback.format_exc()}")
                    await asyncio.sleep(2)  # Wait before retrying
                    
    except Exception as e:
        log(f"üí• FATAL ERROR in run_validator: {e}")
        log(f"Traceback: {traceback.format_exc()}")
        # Keep container alive for debugging
        log("Keeping container alive for debugging...")
        await asyncio.sleep(3600)

async def main():
    """Main entry point with error handling."""
    try:
        await run_validator()
    except KeyboardInterrupt:
        log("üõë Validator stopped by user (Ctrl+C)")
    except Exception as e:
        log(f"üí• FATAL ERROR in main: {e}")
        log(f"Traceback: {traceback.format_exc()}")
        # Keep container alive for debugging
        log("Keeping container alive for debugging...")
        await asyncio.sleep(3600)

if __name__ == "__main__":
    log("üöÄ EmailValidator starting (FIXED SLIM PATTERN)...")
    log("=" * 60)
    
    try:
        asyncio.run(main())
    except Exception as e:
        log(f"üí• CRITICAL ERROR: {e}")
        log(f"Traceback: {traceback.format_exc()}")
        # Keep container alive even on critical errors
        import time
        log("Keeping container alive for debugging...")
        time.sleep(3600)

